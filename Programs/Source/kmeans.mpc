from Compiler.types import sint, regint, Array, MemValue
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else
from math import log2, ceil

# Base port number for client connections
PORTNUM = 14000

# Program arguments: test flag, number of clients, number of data points (n_size), 
# dimensions of data points (dim_size), and number of centroids (k_size)
test = program.args[0]
num_clients = int(program.args[1])
n_input_size = int(program.args[2])
dim_size = int(program.args[3])
k_input_size = int(program.args[4])

k_size = k_input_size * num_clients
n_size = n_input_size * num_clients

# print_ln("Test: %s | N size: %s | Dim size: %s | K size: %s", test, n_input_size, dim_size, k_input_size)

def accept_client():
    """
    Accepts a connection from a client and retrieves the last flag from the socket.
    
    Returns:
        tuple: client_socket_id (regint), last (regint)
    """
    client_socket_id = accept_client_connection(PORTNUM)
    last = regint.read_from_socket(client_socket_id)
    return client_socket_id, last

def close_connections(number_clients):
    """
    Closes the connections for all clients.

    Args:
        number_clients (int): The number of clients connected.
    """
    @for_range(number_clients)
    def _(i):
        closeclientconnection(i)

def log2_sint(x: sint, bit_length: int) -> sint:
    """
    Compute the integer part of the log2 of an `sint` using bit decomposition.

    Args:
        x: The secret-shared secret integer input.
        bit_length: The bit length of the input (must be known or assumed).

    Returns:
        sint: The integer part of log2(x).
    """
    bits = x.bit_decompose()

    # Initialize result as 0
    log2_result = sint(0)

    # Find the position of the most-significant bit set to 1
    @for_range(bit_length)
    def _(i):
        log2_result = i.if_else(bits[i], log2_result)
    
    return log2_result

def build_tree(input, tree_depth):
    """
    Builds a KD-Tree from the input data points.

    Args:
        input (Matrix): The input data points.
        tree_depth (int): The depth of the tree.
    
    Returns:
        list: The KD-Tree represented as a list of Arrays.
    """
    node_count = 2 ** (tree_depth + 1) - 1
    kd_tree = Matrix(node_count, dim_size, sint)

    # Stack for iterative construction of the KD-Tree
    stack = [(0, input, 0)]

    while stack:
        node_index, subset, depth = stack.pop()

        @if_(len(subset) == 1)
        def _():
            kd_tree[node_index].assign(subset[0])
            print_ln("Leaf Node (Index: %s):", node_index)
            kd_tree[node_index].print_reveal_nested(end=" ")
            print_ln()

        @if_(len(subset) != 1)
        def _():
            split_dim = depth % dim_size

            subset.sort(key_indices=(split_dim,))
            median_index = len(subset) // 2
            median_point = subset[median_index]

            kd_tree[node_index].assign(median_point)

            print_ln("Node Index: %s | Median Index: %s", node_index, median_index)
            median_point.print_reveal_nested(end=" ")
            print_ln()

            # Create Matrices for left and right subsets
            left_subset = Matrix(median_index, dim_size, sint)
            right_subset = Matrix(median_index, dim_size, sint)

            # Copy values from subset into left_subset and right_subset
            left_ref = subset.get_part(0, median_index)
            right_ref = subset.get_part(median_index, len(subset) - median_index)

            for i in range(median_index):
                left_subset[i].assign_part_vector(left_ref[i], 0)

            for i in range(len(subset) - median_index):
                right_subset[i].assign_part_vector(right_ref[i], 0)


            # print_ln("Left Subset (Depth: %s):", depth)
            # for a in left_subset:
                # a.print_reveal_nested(end= " ")
            # print_ln()

            # print_ln("Right Subset (Depth: %s):", depth)
            # for a in right_subset:
                # a.print_reveal_nested(end=" ")
            # print_ln()

            left_child_index = 2 * node_index + 1
            right_child_index = 2 * node_index + 2
            
            stack.append((left_child_index, left_subset, depth + 1))
            stack.append((right_child_index, right_subset, depth + 1))

            # print_ln("Current status of the tree:")
            # for a in kd_tree:
            #     a.print_reveal_nested(end=" ")
            # print_ln()
    
    return kd_tree

# def nearest_neighbor_search(kd_tree, point, depth=0):
#     """
#     Secure approximate nearest-neighbor search in a KD-tree using MP-SPDZ.
    
#     Args:
#         kd_tree (list of Arrays): The KD-tree, represented as a list of Arrays (each Array is a point).
#         point (Array): The query point for which the nearest neighbor is being searched.
#         depth (int): The current depth in the KD-tree, used to determine the splitting dimension.
        
#     Returns:
#         sint: The index in the KD-tree of the nearest neighbor.
#     """
#     num_points = len(kd_tree)
#     dim_size = len(point)

#     # Initialize the best distance and best index as very large values
#     best_dist = sint(2**31 - 1)  # Large value for initial best distance
#     best_index = regint(-1)  # Invalid index

#     # Stack-based iterative traversal of the KD-tree
#     stack = [(int(0), depth)]  # Stack to hold nodes to visit (node index, depth)

#     while stack:
#         node_index, depth = stack.pop()

#         # Current node point and dimension to split by
#         node_point = kd_tree[node_index]
#         split_dim = depth % dim_size

#         # Securely compute Euclidean distance between query point and node point
#         dist = sum((point[i] - node_point[i]) ** 2 for i in range(dim_size))

#         # Update best distance and best index if this node is closer
#         update_best = dist < best_dist
#         best_dist = if_else(update_best, dist, best_dist)
#         best_index = if_else(update_best, node_index, best_index)

#         # Securely determine which subtree to explore
#         go_left = point[split_dim] < node_point[split_dim]

#         # If going left, visit the left child first, then right child
#         left_child_index = 2 * node_index + 1
#         right_child_index = 2 * node_index + 2

#         # Obliviously decide which child to explore first
#         stack.append((if_else(go_left, right_child_index, left_child_index), depth + 1))
#         stack.append((if_else(go_left, left_child_index, right_child_index), depth + 1))

#     # Return the best index found
#     return best_index

def nearest_neighbor_search(kd_tree, point):
    """
    Traverse the KD-Tree based on the comparison with the splitting dimension of each node.

    Args:
        kd_tree (Matrix): The KD-Tree represented as a Matrix.
        point (Array): The point we are searching for in the KD-Tree.

    Returns:
        cint: The index in the KD-Tree where the search would end.
    """
    node_index = cint(0)  # Start at the root of the KD-Tree (index 0)

    # Calculate the depth of the KD-Tree
    tree_depth = int(ceil(log2(len(kd_tree))))
    # print_ln("Starting KD-Tree traversal. Tree depth: %s", tree_depth)

    # Traverse the tree from root to leaf
    for depth in range(tree_depth):
        # Get the current node
        node = kd_tree[node_index]
        
        # Debug: Print the current node
        print_ln("Depth: %s | Traversing node at index: %s", depth, node_index)
        node.print_reveal_nested()

        # Find the current splitting dimension based on the depth
        split_dim = depth % dim_size
        # print_ln("Splitting on dimension: %s", split_dim)

        # Compare the point's value in the split dimension with the node's value
        go_right = point[split_dim] >= node[split_dim]
        print_ln("Comparison result (go right): %s", go_right.reveal())

        # Compute the left and right child indices
        left_index = 2 * node_index + 1
        right_index = 2 * node_index + 2

        # Choose the next node based on the comparison result
        node_index = if_else(go_right, right_index, left_index).reveal()

        # Debug: Print the next node index
        print_ln("Next node index: %s", node_index)

    # Return the final node index where the traversal ends
    print_ln("Traversal complete. Final node index: %s", node_index)
    return node_index

def main():
    """
    Main function to handle client connections, receive data from clients, and store it in matrices.
    The function waits for all clients to connect, then receives N and K data points from each client.
    """
    # Start listening for client connections
    listen_for_clients(PORTNUM)
    # print_ln("Listening for clients on base port %s", PORTNUM)

    # Arrays to store client socket IDs, client IDs, and connection status
    client_sockets = Array(num_clients, regint)
    client_ids = Array(num_clients, sint)
    seen = Array(num_clients, regint)
    seen.assign_all(0)

    # Matrices to store N and K data points from all clients
    n_dataset = Matrix(n_input_size * num_clients, dim_size, sint)
    k_dataset = Matrix(k_input_size * num_clients, dim_size, sint)

    # Loop until all clients have connected
    @do_while
    def client_connections():
        client_id, last = accept_client()
        print_ln("Client Connected: ID: %s | Last Flag: %s", client_id, last, print_secrets=True)
        
        # Ensure client ID is within the expected range
        @if_(client_id >= num_clients)
        def _():
            print_ln("Error: Client ID too high. Aborting.")
            crash()
        
        client_sockets[client_id] = client_id
        client_ids[client_id] = client_id
        seen[client_id] = 1
        return (sum(seen) < num_clients)
    
    print_ln("All clients have connected. Receiving data...")

    # Receive data from each connected client
    for i in range(num_clients):
        @if_(seen == 1)
        def receive_data():
            # Receive N data points
            print_ln("Receiving N from Client %s", client_ids[i], print_secrets=True)
            for j in range(n_input_size):
                rx = sint.receive_from_client(dim_size, client_sockets[i])
                n_dataset[(i * n_input_size) + j] = rx

            # Receive K data points
            print_ln("Receiving K from Client %s", client_ids[i], print_secrets=True)
            for k in range(k_input_size):
                rx = sint.receive_from_client(dim_size, client_sockets[i])
                k_dataset[(i * k_input_size) + k] = rx

    print_ln("Finished receiving data from all clients.")
    print_ln("Shuffling rows of K dataset.")
    k_dataset.secure_shuffle()

    print_ln("Starting the KD-Tree clustering.")
    tree_depth = int(ceil(log2(len(k_dataset))))
    kd_tree = build_tree(k_dataset, tree_depth)

    print_ln("KD-Tree Construction Complete. Revealing KD-Tree:")

    for i in range(len(kd_tree)):
        print_str("KD-Tree Node [%s]:", i)
        kd_tree[i].print_reveal_nested()
    
    
    for i in range(n_size):
        point = n_dataset[i]
        print_str("Processing data point: ")
        point.print_reveal_nested()

        best_index = nearest_neighbor_search(kd_tree, point)
        print_ln("Best index for point: %s", best_index)
    
    # Close connections to all clients
    close_connections(num_clients)

# Run the main function
main()